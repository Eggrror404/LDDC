# SPDX-License-Identifier: GPL-3.0-or-later
# SPDX-FileCopyrightText: Copyright (c) 2024 沉默の金

from backend.lyrics import Lyrics, LyricsLine, MultiLyricsData, get_full_timestamps_lyrics_data
from utils.utils import get_divmod_time, version

from .share import get_lyrics_lines

ASS_HEADER1 = f"""[Script Info]
; Script generated by LDDC {version if version is not None else ""}
; https://github.com/chenmozhijin/LDDC
"""

ASS_HEADER2 = ("""ScriptType: v4.00+
Timer: 100.0000

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, """
               "Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding")


def ms2ass_timestamp(ms: int) -> str:
    h, m, s, ms = get_divmod_time(ms)

    return f"{int(h):02d}:{int(m):02d}:{int(s):02d}.{int(ms):03d}"


def lyrics_line2asstext(lyrics_line: LyricsLine) -> str:
    ass_text = ""
    if len(lyrics_line[2]) == 1:
        return "".join([word[2]for word in lyrics_line[2] if word[2] != ""])
    for word in lyrics_line[2]:
        if word[0] is not None and word[1] is not None:
            k = abs(word[1] - word[0]) // 10
        else:
            return "".join([word[2]for word in lyrics_line[2] if word[2] != ""])
        ass_text += r"{\kf" + str(k) + "}" + word[2]
    return ass_text


def ass_converter(lyrics: Lyrics,
                  lyrics_dict: MultiLyricsData,
                  langs_mapping: dict[str, dict[int, int]],
                  lyrics_order: list[str]) -> str:

    ass_text = ASS_HEADER1
    if lyrics.title is not None:
        ass_text += f"Title: {lyrics.title}\n"
    ass_text += ASS_HEADER2 + "\n"
    ass_text += "\n".join([
        f"Style: {lrc_type},Arial,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,2,2,10,10,10,1" for lrc_type in lyrics],
    ) + "\n\n"
    ass_text += "[Events]\nFormat: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text\n"

    lyrics_orig = get_full_timestamps_lyrics_data(lyrics_dict["orig"],
                                                  end_time=lyrics.duration * 1000 if lyrics.duration is not None else None,
                                                  only_line=True)

    lyrics_texts = {lang: "" for lang in lyrics_order[::-1]}
    for orig_i, orig_line in enumerate(lyrics_orig):

        if orig_line[0] is None or orig_line[1] is None:
            continue

        for lyrics_line, lang in zip(get_lyrics_lines(lyrics_dict, lyrics_order, orig_i, orig_line, langs_mapping), lyrics_order, strict=False):
            lyrics_texts[lang] += f"Dialogue: 0,{ms2ass_timestamp(orig_line[0])},{ms2ass_timestamp(orig_line[1])},{lang},,0,0,0,,{lyrics_line2asstext(lyrics_line)}\n"

    return ass_text + "".join(lyrics_texts.values())
